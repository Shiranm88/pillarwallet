diff --git a/node_modules/react-native-modal/dist/modal.js b/node_modules/react-native-modal/dist/modal.js
index 2e3f530..2b7fdd8 100644
--- a/node_modules/react-native-modal/dist/modal.js
+++ b/node_modules/react-native-modal/dist/modal.js
@@ -11,6 +11,7 @@ const extractAnimationFromProps = (props) => ({
     animationOut: props.animationOut,
 });
 export class ReactNativeModal extends React.Component {
+    eventEmitter: any;
     constructor(props) {
         super(props);
         // We use an internal state for keeping track of the modal visibility: this allows us to keep
@@ -30,6 +31,7 @@ export class ReactNativeModal extends React.Component {
         this.inSwipeClosingState = false;
         this.currentSwipingDirection = null;
         this.panResponder = null;
+        this.eventEmitter = null;
         this.buildPanResponder = () => {
             let animEvt = null;
             this.panResponder = PanResponder.create({
@@ -352,13 +354,15 @@ export class ReactNativeModal extends React.Component {
         if (this.props.onSwipe) {
             console.warn('`<Modal onSwipe="..." />` is deprecated and will be removed starting from 13.0.0. Use `<Modal onSwipeComplete="..." />` instead.');
         }
-        DeviceEventEmitter.addListener('didUpdateDimensions', this.handleDimensionsUpdate);
+        this.eventEmitter = DeviceEventEmitter.addListener('didUpdateDimensions', this.handleDimensionsUpdate);
         if (this.state.isVisible) {
             this.open();
         }
     }
     componentWillUnmount() {
-        DeviceEventEmitter.removeListener('didUpdateDimensions', this.handleDimensionsUpdate);
+        if(this.eventEmitter){
+            this.eventEmitter.remove()
+        }
     }
     componentDidUpdate(prevProps) {
         // If the animations have been changed then rebuild them to make sure we're
